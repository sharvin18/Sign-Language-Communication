# [[ 2.03167453e-01  7.32063890e-01 -1.73366334e-05]
#  [ 2.34792098e-01  7.03545392e-01 -4.46309373e-02]
#  [ 2.42843479e-01  6.50093496e-01 -7.23745823e-02]
#  [ 2.15365812e-01  6.15221500e-01 -9.44936424e-02]
#  [ 1.88552886e-01  5.88635862e-01 -1.08196959e-01]
#  [ 2.38139957e-01  5.44614315e-01 -5.09143472e-02]
#  [ 2.52344191e-01  4.72971112e-01 -8.53555501e-02]
#  [ 2.60507941e-01  4.29647654e-01 -1.03354320e-01]
#  [ 2.66717970e-01  3.92662048e-01 -1.12894282e-01]
#  [ 2.02326462e-01  5.45611739e-01 -4.77214493e-02]
#  [ 1.82210833e-01  4.62136865e-01 -8.31767172e-02]
#  [ 1.69201389e-01  4.10625935e-01 -1.02839567e-01]
#  [ 1.59420043e-01  3.67459297e-01 -1.18874721e-01]
#  [ 1.75455332e-01  5.73245287e-01 -4.85494360e-02]
#  [ 1.63444191e-01  5.47248006e-01 -9.42149833e-02]
#  [ 1.82090834e-01  5.89351833e-01 -1.01079173e-01]
#  [ 1.95302173e-01  6.14902675e-01 -9.85702276e-02]
#  [ 1.56025499e-01  6.09041691e-01 -5.27262129e-02]
#  [ 1.54008895e-01  5.92927039e-01 -8.91631767e-02]
#  [ 1.72353521e-01  6.24796152e-01 -9.74861160e-02]
#  [ 1.86130762e-01  6.47686303e-01 -9.60851014e-02]]




# [[ 0.79295796  0.88555789  0.        ]
#  [ 0.71593094  0.83800179 -0.02045004]
#  [ 0.65872765  0.75481904 -0.0325893 ]
#  [ 0.62629831  0.6766485  -0.04687867]
#  [ 0.59891576  0.61588216 -0.06177552]
#  [ 0.72589993  0.61699677 -0.00321596]
#  [ 0.70979989  0.51052552 -0.02172335]
#  [ 0.70224583  0.44602829 -0.03664629]
#  [ 0.69756782  0.38996679 -0.04770629]  
#  [ 0.77793276  0.60863966 -0.01413628]
#  [ 0.77901131  0.49381101 -0.02892692]
#  [ 0.77726382  0.42177761 -0.04537245]
#  [ 0.77513623  0.36242005 -0.05935861]  
#  [ 0.82444584  0.62644106 -0.03052971]
#  [ 0.83482337  0.51832056 -0.05171335]
#  [ 0.83830124  0.44926757 -0.07038048]
#  [ 0.8378436   0.3907952  -0.08355322]
#  [ 0.86955458  0.66696835 -0.05008559]
#  [ 0.89342546  0.59356797 -0.07023841]
#  [ 0.906618    0.54699743 -0.08262292]
#  [ 0.91572481  0.5027256  -0.09113081]] 

from matplotlib import pyplot as plt
import numpy as np
import json

sentence = input("Enter your sentence: ").lower()

file = "database.json"

def connectpoints(res_list):

    f = open(file, 'r')
    data_file = json.load(f)
    plt.ion()
    for symbol in res_list:

        if(symbol == " "):
            symbol = "space"
        
        for i in range(5):
            
            results = data_file[symbol][str(i)]
            
            # Thumb with base point
            x0, x1, x2, x3, x4 = results[0][0], results[1][0], results[2][0], results[3][0], results[4][0]
            y0, y1, y2, y3, y4 = results[0][1], results[1][1], results[2][1], results[3][1], results[4][1]
            z0, z1, z2, z3, z4 = results[0][2], results[1][2], results[2][2], results[3][2], results[4][2]
            
            # Index Finger
            x5,x6,x7,x8 = results[5][0], results[6][0], results[7][0], results[8][0]
            y5,y6,y7,y8 = results[5][1], results[6][1], results[7][1], results[8][1]
            z5,z6,z7,z8 = results[5][2], results[6][2], results[7][2], results[8][2]

            # Middle Finger
            x9,x10,x11,x12 = results[9][0], results[10][0], results[11][0], results[12][0]
            y9,y10,y11,y12 = results[9][1], results[10][1], results[11][1], results[12][1]
            z9,z10,z11,z12 = results[9][2], results[10][2], results[11][2], results[12][2]

            # Ring Finger
            x13,x14,x15,x16 = results[13][0], results[14][0], results[15][0], results[16][0]
            y13,y14,y15,y16 = results[13][1], results[14][1], results[15][1], results[16][1]
            z13,z14,z15,z16 = results[13][2], results[14][2], results[15][2], results[16][2]

            # pinky finger with base point
            x17, x18, x19, x20 = results[17][0], results[18][0], results[19][0], results[20][0]
            y17, y18, y19, y20 = results[17][1], results[18][1], results[19][1], results[20][1]
            z17, z18, z19, z20 = results[17][2], results[18][2], results[19][2], results[20][2]

            # plt.figure()
            ax = plt.axes(projection='3d')
            plt.gca().cla()
            plt.title(symbol)
            # Joining finger base points
            ax.plot3D([x2,x5,x9,x13,x17],[y2,y5,y9,y13,y17], [z2,z5,z9,z13,z17],'red', linewidth=2)
            # Joining finger base points to base of palm
            ax.plot3D([x0,x5],[y0,y5], [z0,z5],'red', linewidth=1)
            ax.plot3D([x0,x9],[y0,y9], [z0,z9],'red', linewidth=1)
            ax.plot3D([x0,x13],[y0,y13], [z0,z13],'red', linewidth=1)
            # PLotting each finger
            ax.plot3D([x0,x1,x2,x3,x4],[y0,y1,y2,y3,y4], [z0,z1,z2,z3,z4],'k-', linewidth=4)
            ax.plot3D([x5,x6,x7,x8],[y5,y6,y7,y8], [z5,z6,z7,z8],'k-', linewidth=4)
            ax.plot3D([x9,x10,x11,x12],[y9,y10,y11,y12], [z9,z10,z11,z12],'k-', linewidth=4)
            ax.plot3D([x13,x14,x15,x16],[y13,y14,y15,y16], [z13,z14,z15,z16],'k-', linewidth=4)
            ax.plot3D([x0,x17,x18,x19,x20],[y0,y17,y18,y19,y20], [z0,z17,z18,z19,z20],'k-', linewidth=4)

            # ax.set_zlabel('Z-Axis')
            # ax.set_ylabel('Y-Axis')
            # ax.set_xlabel('X-Axis')
            # ax.view_init(240, -90)
            ax.view_init(-120, -90)
            plt.draw()
            plt.axis('off')
            plt.pause(0.08)
            plt.clf()
    # plt.show()

    f.close()

connectpoints(list(sentence))

# def connectpoints(results):
    
#     # Thumb with base point
#     x0, x1, x2, x3, x4 = results[0][0], results[1][0], results[2][0], results[3][0], results[4][0]
#     y0, y1, y2, y3, y4 = results[0][1], results[1][1], results[2][1], results[3][1], results[4][1]
#     z0, z1, z2, z3, z4 = results[0][2], results[1][2], results[2][2], results[3][2], results[4][2]
    
#     # Index Finger
#     x5,x6,x7,x8 = results[5][0], results[6][0], results[7][0], results[8][0]
#     y5,y6,y7,y8 = results[5][1], results[6][1], results[7][1], results[8][1]
#     z5,z6,z7,z8 = results[5][2], results[6][2], results[7][2], results[8][2]

#     # Middle Finger
#     x9,x10,x11,x12 = results[9][0], results[10][0], results[11][0], results[12][0]
#     y9,y10,y11,y12 = results[9][1], results[10][1], results[11][1], results[12][1]
#     z9,z10,z11,z12 = results[9][2], results[10][2], results[11][2], results[12][2]

#     # Ring Finger
#     x13,x14,x15,x16 = results[13][0], results[14][0], results[15][0], results[16][0]
#     y13,y14,y15,y16 = results[13][1], results[14][1], results[15][1], results[16][1]
#     z13,z14,z15,z16 = results[13][2], results[14][2], results[15][2], results[16][2]

#     # pinky finger with base point
#     x17, x18, x19, x20 = results[17][0], results[18][0], results[19][0], results[20][0]
#     y17, y18, y19, y20 = results[17][1], results[18][1], results[19][1], results[20][1]
#     z17, z18, z19, z20 = results[17][2], results[18][2], results[19][2], results[20][2]

#     plt.figure()
#     ax = plt.axes(projection='3d')
    
#     # Joining finger base points
#     ax.plot3D([x2,x5,x9,x13,x17],[y2,y5,y9,y13,y17], [z2,z5,z9,z13,z17],'red', linewidth=2)
#     # Joining finger base points to base of palm
#     ax.plot3D([x0,x5],[y0,y5], [z0,z5],'red', linewidth=1)
#     ax.plot3D([x0,x9],[y0,y9], [z0,z9],'red', linewidth=1)
#     ax.plot3D([x0,x13],[y0,y13], [z0,z13],'red', linewidth=1)
#     # PLotting each finger
#     ax.plot3D([x0,x1,x2,x3,x4],[y0,y1,y2,y3,y4], [z0,z1,z2,z3,z4],'k-', linewidth=4)
#     ax.plot3D([x5,x6,x7,x8],[y5,y6,y7,y8], [z5,z6,z7,z8],'k-', linewidth=4)
#     ax.plot3D([x9,x10,x11,x12],[y9,y10,y11,y12], [z9,z10,z11,z12],'k-', linewidth=4)
#     ax.plot3D([x13,x14,x15,x16],[y13,y14,y15,y16], [z13,z14,z15,z16],'k-', linewidth=4)
#     ax.plot3D([x0,x17,x18,x19,x20],[y0,y17,y18,y19,y20], [z0,z17,z18,z19,z20],'k-', linewidth=4)

    

#     ax.set_zlabel('Z-Axis')
#     ax.set_ylabel('Y-Axis')
#     ax.set_xlabel('X-Axis')
#     ax.view_init(240, -90)
#     plt.draw()
#     plt.axis('off')
#     plt.pause(.1)
#     # plt.cla()
#     # plt.axis('off')
#     plt.show()
    

results1 = np.array([[ 0.79295796,  0.88555789,  0.        ],
                    [ 0.71593094,  0.83800179, -0.02045004],
                    [ 0.65872765,  0.75481904, -0.0325893 ],
                    [ 0.62629831,  0.6766485,  -0.04687867],
                    [ 0.59891576,  0.61588216, -0.06177552],
                    [ 0.72589993,  0.61699677, -0.00321596],
                    [ 0.70979989,  0.51052552, -0.02172335],
                    [ 0.70224583,  0.44602829, -0.03664629],
                    [ 0.69756782,  0.38996679, -0.04770629], 
                    [ 0.77793276,  0.60863966, -0.01413628],
                    [ 0.77901131,  0.49381101, -0.02892692],
                    [ 0.77726382,  0.42177761, -0.04537245],
                    [ 0.77513623,  0.36242005, -0.05935861], 
                    [ 0.82444584,  0.62644106, -0.03052971],
                    [ 0.83482337,  0.51832056, -0.05171335],
                    [ 0.83830124,  0.44926757, -0.07038048],
                    [ 0.8378436 ,  0.3907952,  -0.08355322],
                    [ 0.86955458,  0.66696835, -0.05008559],
                    [ 0.89342546, 0.59356797, -0.07023841],
                    [ 0.906618,    0.54699743, -0.08262292],
                    [ 0.91572481,  0.5027256,  -0.09113081]])


results2 = np.array([[ 2.03167453e-01,  7.32063890e-01, -1.73366334e-05],
                    [ 2.34792098e-01,  7.03545392e-01, -4.46309373e-02],
                    [ 2.42843479e-01, 6.50093496e-01, -7.23745823e-02],
                    [ 2.15365812e-01,  6.15221500e-01, -9.44936424e-02],
                    [ 1.88552886e-01,  5.88635862e-01, -1.08196959e-01],
                    [ 2.38139957e-01,  5.44614315e-01, -5.09143472e-02],
                    [ 2.52344191e-01,  4.72971112e-01, -8.53555501e-02],
                    [ 2.60507941e-01,  4.29647654e-01, -1.03354320e-01],
                    [ 2.66717970e-01,  3.92662048e-01, -1.12894282e-01],
                    [ 2.02326462e-01,  5.45611739e-01, -4.77214493e-02],
                    [ 1.82210833e-01, 4.62136865e-01, -8.31767172e-02],
                    [ 1.69201389e-01,  4.10625935e-01, -1.02839567e-01],
                    [ 1.59420043e-01,  3.67459297e-01, -1.18874721e-01],
                    [ 1.75455332e-01,  5.73245287e-01, -4.85494360e-02],
                    [ 1.63444191e-01,  5.47248006e-01, -9.42149833e-02],
                    [ 1.82090834e-01,  5.89351833e-01, -1.01079173e-01],
                    [ 1.95302173e-01,  6.14902675e-01, -9.85702276e-02],
                    [ 1.56025499e-01,  6.09041691e-01, -5.27262129e-02],
                    [ 1.54008895e-01,  5.92927039e-01, -8.91631767e-02],
                    [ 1.72353521e-01,  6.24796152e-01, -9.74861160e-02],
                    [ 1.86130762e-01,  6.47686303e-01, -9.60851014e-02]])


results3 = np.array([
                        [ 3.10034573e-01,  4.18048650e-01, -7.27073930e-05],
                        [ 3.49501848e-01,  4.16075349e-01, -5.90089634e-02],
                        [ 3.81926745e-01,  3.93127501e-01, -9.11912769e-02],
                        [ 4.08945590e-01,  3.61102909e-01, -1.03985667e-01],
                        [ 4.23768103e-01,  3.24596643e-01, -1.05862573e-01],
                        [ 3.22013915e-01,  3.20510805e-01, -1.12751126e-01],
                        [ 3.66718620e-01,  2.74461955e-01, -1.23923667e-01],
                        [ 3.99324238e-01,  2.80189008e-01, -1.10018224e-01],
                        [ 4.15300757e-01,  2.97051668e-01, -9.62332562e-02],
                        [ 3.10473830e-01,  2.99167812e-01, -7.86154941e-02],
                        [ 3.61338258e-01,  2.53780186e-01, -8.86233374e-02],
                        [ 3.96066964e-01,  2.65966773e-01, -7.46642426e-02],
                        [ 4.10897553e-01,  2.88098633e-01, -6.26360178e-02],
                        [ 3.07757497e-01,  2.89131284e-01, -4.59165871e-02],
                        [ 3.58361244e-01,  2.50651091e-01, -5.35415001e-02],
                        [ 3.90398741e-01,  2.63356000e-01, -4.54894640e-02],
                        [ 4.04814422e-01,  2.85411596e-01, -3.83318327e-02],
                        [ 3.11687827e-01,  2.86554515e-01, -1.53783299e-02],
                        [ 3.51802111e-01,  2.58160353e-01, -2.37218384e-02],
                        [ 3.75232935e-01,  2.64747918e-01, -2.56860554e-02],
                        [ 3.87937635e-01,  2.82161742e-01, -2.39533726e-02]
                    ])


# Indices to join: 
# 0,1,2,3,4 - Thumb Line
# 5,6,7,8 - index finger
# 9,10, 11, 12 - middle
# 13, 14,15,16 - ring finger
# 17,18,19,20, 0 - pinky finger (It will join with the base of the hand)

# 1,5,9,13,17 - base of all fingers




# Hand data - 1 or 5
# loop matlplotplib
# matplotlib ko sajana hai
# tkinter/kivy
# Report